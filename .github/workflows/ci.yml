name: CI and Release


on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'
jobs:
  build-and-test:
    runs-on: ${{ format('{0}-{1}', join(fromJSON('["base","2204"]'), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["arm64","amd64"]
        build-type: [debug, release]
      fail-fast: false

    steps:
    - uses: actions/checkout@v5
    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get install -y build-essential meson ninja-build libcurl4-openssl-dev libcjson-dev libarchive-dev
    - name: Setup builddir for shared lib
      run: meson setup shared_build -Dlibrary_type=shared --wipe || meson configure shared_build -Dlibrary_type=shared
    - name: Build shared lib
      run: meson compile -C shared_build
    - name: Run tests (shared build)
      run: meson test -C shared_build

    - name: Setup builddir for static lib
      run: meson setup static_build -Dlibrary_type=static --wipe || meson configure static_build -Dlibrary_type=static
    - name: Build static lib
      run: meson compile -C static_build
    - name: Run tests (static build)
      run: meson test -C static_build

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v5
    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get install -y build-essential meson ninja-build libcurl4-openssl-dev libcjson-dev libarchive-dev
    - name: Setup builddir for shared lib
      run: meson setup shared_build -Dlibrary_type=shared --wipe || meson configure shared_build -Dlibrary_type=shared
    - name: Build shared lib
      run: meson compile -C shared_build
    - name: Run tests (shared build)
      run: meson test -C shared_build

    - name: Setup builddir for static lib
      run: meson setup static_build -Dlibrary_type=static --wipe || meson configure static_build -Dlibrary_type=static
    - name: Build static lib
      run: meson compile -C static_build
    - name: Run tests (static build)
      run: meson test -C static_build

    - name: Get auto-generated release notes
      id: release_notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        NOTES=$(curl -sS -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/generate-notes?tag_name=$TAG" \
           | jq -r '.body')
           echo "release_notes<<EOF" >> $GITHUB_OUTPUT
           echo "$NOTES" >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
      shell: bash

    # Create GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ${{ steps.release_notes.outputs.result }}
        draft: false
        prerelease: false
        token: ${{ env.GITHUB_TOKEN }}

    # Upload shared library
    - name: Upload shared library
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shared_build/liboci_client.so
        asset_name: liboci_client.so
        asset_content_type: application/octet-stream
        token: ${{ env.GITHUB_TOKEN }}

    # Upload static library
    - name: Upload static library
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./static_build/liboci_client.a
        asset_name: liboci_client.a
        asset_content_type: application/octet-stream
        token: ${{ env.GITHUB_TOKEN }}

    # Upload example executable
    - name: Upload example executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./shared_build/oci_client_demo
        asset_name: oci_client_demo
        asset_content_type: application/octet-stream
        token: ${{ env.GITHUB_TOKEN }}
